const cds = require('../../../')

const crypto = require('crypto')
const metaInfo = require('../utils/metaInfo')

const normalize_header = value => {
  return value.split(',').map(str => str.trim())
}

const validate_etag = (header, etag) => {
  const normalized = normalize_header(header)
  return normalized.includes(etag) || normalized.includes('*') || normalized.includes('"*"')
}

const generateEtag = s => {
  return `W/"${crypto.createHash('sha256').update(s).digest('base64')}"`
}

module.exports = srv =>
  function service_document(req, res) {
    if (req.method === 'HEAD') return res.end()
    if (req.method !== 'GET') {
      const msg = `Method ${req.method} is not allowed for calls to the service endpoint`
      throw Object.assign(new Error(msg), { statusCode: 405 })
    }

    const m = cds.context.model || cds.model
    const csnService = (cds.context.model || cds.model).definitions[srv.name]

    if (req.headers['if-match']) {
      if (csnService.srvDocEtag) {
        const valid = validate_etag(req.headers['if-match'], csnService.srvDocEtag)
        if (!valid) return res.status(412).end()
      }
    }

    if (req.headers['if-none-match']) {
      if (csnService.srvDocEtag) {
        const unchanged = validate_etag(req.headers['if-none-match'], csnService.srvDocEtag)
        if (unchanged) {
          res.set('etag', csnService.srvDocEtag)
          return res.status(304).end()
        }
      }
    }

    const srvEntities = m.childrenOf(srv.name)
    // REVISIT: How to identify the exposed entities? api.ignore, autoexposed, ...
    const exposedEntities = Object.keys(srvEntities).filter(
      e => !srvEntities[e]['@cds.api.ignore'] && e !== 'DraftAdministrativeData'
    )

    csnService.srvDocEtag = generateEtag(JSON.stringify(exposedEntities))
    res.set('etag', csnService.srvDocEtag)

    const info = metaInfo({ SELECT: { from: { ref: [srv.name] } } }, 'READ', srv, {}, req, false)

    return res.json({
      '@odata.context': info.metadata.contextUrl,
      '@odata.metadataEtag': csnService.srvDocEtag,
      value: exposedEntities.map(e => {
        const e_ = e.replace(/\./g, '_')
        return { name: e_, url: e_ }
      })
    })
  }
