const cds = require('../../_runtime/cds')

const RestRequest = require('../RestRequest')

const { checkStatic } = require('../../_runtime/cds-services/util/assert')
const getError = require('../../_runtime/common/error')

const typeCheckers = require('../../common/assert/type')

// REVISIT: use i18n
const _enrichErrorDetails = (isPrimitive, error) => {
  const element = error.target ? ` '${error.target}' ` : ' '
  const typeDetails = isPrimitive ? '.' : ` according to type definition '${error.type}'.`
  const value = typeof error.value === 'string' ? `'${error.value}'` : error.value
  if (element && element.match(/\w/)) return `Value ${value} of element${element}is invalid${typeDetails}`
  return `Value ${value} is invalid${typeDetails}`
}

// REVISIT: use i18n
const _getTypeError = (operation, type, errorDetails) => {
  const typeErrors = errorDetails.map(error => _enrichErrorDetails(cds.builtin.types[type], error))
  const msg = `Failed to validate return value ${type ? `of type '${type}' ` : ''}for custom ${operation.kind} '${
    operation.name
  }': ${typeErrors.join(' ')}`
  return getError(msg)
}

const _validateReturnType = (operation, data) => {
  // array of or single return type
  // in case of modeled return type: { type: 'bookModel.Books', _type: csnDefinition }
  // in case of inline return type: { elements: ... } and no explicit name of return type
  const returnType = operation.returns.items ? operation.returns.items : operation.returns

  if (typeof data === 'undefined') return true
  if (returnType['@open']) return true

  let checkResult

  // .type of action/function behaves different to .type of other csn elements
  // Return type contains primitives
  // eslint-disable-next-line no-proto
  const _type = typeof returnType._type === 'object' ? returnType.__proto__._type : returnType._type // REVISIT: super dirty hack for compiler's to.edmx polluting the csn definitions with ._type -> please use Symbols instead
  const typeChecker = typeCheckers[_type] // IMPORTANT: use ._type
  if (typeChecker) {
    const array = Array.isArray(data) ? data : [data]
    checkResult = array.filter(value => !typeChecker(value)).map(value => ({ type: _type, value }))
  } else {
    if (typeof data !== 'object') {
      throw new Error(
        `Invalid scalar value ${typeof data === 'string' ? `"${data}"` : data} for return type "${returnType.type}"`
      )
    }

    // Only check complex objects, ignore non-modelled data
    data = (Array.isArray(data) ? data : [data]).filter(entry => typeof entry === 'object' && !Array.isArray(entry))

    // Determine entity from bound or unbound action/function
    const returnTypeCsnDefinition = returnType._type || returnType

    // REVISIT: remove exception with cds^6
    // mtx returns object instead of string (as in modell) -> skip validation
    if (returnTypeCsnDefinition.type !== 'cds.String') {
      checkResult = checkStatic(returnTypeCsnDefinition, data, true)
    }
  }

  if (checkResult && checkResult.length !== 0) {
    throw _getTypeError(operation, returnType.type, checkResult)
  }

  return true
}

// TODO: add headers to return object to avoid passing _res
module.exports = srv => async (_req, _res) => {
  const { _query: query, _operation: operation, _data: data, _params } = _req

  let result

  const req = query
    ? new RestRequest({ query, event: operation.name, data, params: _params })
    : new RestRequest({ event: operation.name.replace(`${srv.namespace}.`, ''), data, params: _params })
  result = await srv.dispatch(req)

  if (!operation.returns) return { status: 204 }

  // REVISIT: do not use from old rest adapter
  // REVISIT: new impl should return instead of throwing to avoid try catch
  _validateReturnType(operation, result)

  // set content-type header to text/plain for returned primitive data types, except for boolean
  const returnType = operation.returns._type
  if (
    !_res.get('content-type') &&
    !operation.returns.items &&
    returnType &&
    cds.builtin.types[returnType] &&
    returnType !== 'cds.Boolean'
  ) {
    _res.set('content-type', 'text/plain')
  }

  // REVISIT: Still needed with cds-mtxs?
  // mtx compat, modeled as string but object returned
  if (operation.returns._type === 'cds.String' && typeof result === 'object') {
    _res.set('content-type', 'application/json')
  }

  // REVISIT: still needed?
  if (!operation.returns.items && Array.isArray(result)) result = result[0]

  if (result === undefined) return { status: 204 }

  return { result }
}
