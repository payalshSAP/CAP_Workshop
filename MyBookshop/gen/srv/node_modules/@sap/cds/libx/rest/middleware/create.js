const cds = require('../../_runtime/cds')
const { INSERT } = cds.ql

const RestRequest = require('../RestRequest')

const _error4 = rejected =>
  rejected.length > 1
    ? Object.assign(new Error('MULTIPLE_ERRORS'), { details: rejected.map(r => r.reason) })
    : rejected[0].reason

module.exports = srv => async _req => {
  const { _query: query, _target, _data, _params } = _req

  let result, location

  // add the data
  query.entries(_data)
  if (query.INSERT.entries.length > 1) {
    // > batch insert
    const reqs = query.INSERT.entries.map(
      entry => new RestRequest({ query: INSERT.into(query.INSERT.into).entries(entry), _target, params: _params })
    )
    const ress = await Promise.allSettled(reqs.map(req => srv.dispatch(req)))
    const rejected = ress.filter(r => r.status === 'rejected')
    if (rejected.length) throw _error4(rejected)
    result = ress.map(r => r.value)
  } else {
    // > single insert
    const req = new RestRequest({ query, _target, params: _params })
    result = await srv.dispatch(req)
    location = `../${req.entity.replace(srv.name + '.', '')}` // REVISIT: Is it guaranteed that the GET works? Why do we need relative urls?
    for (const k in req.target.keys) location += `/${result[k]}`
  }

  return { result, status: 201, location }
}
