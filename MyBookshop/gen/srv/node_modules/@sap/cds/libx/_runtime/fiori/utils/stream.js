const { ensureDraftsSuffix } = require('./handler')
const { removeIsActiveEntityRecursively, isActiveEntityRequested } = require('./where')

const _adaptSubSelectsDraft = select => {
  if (select.SELECT.from.ref) {
    const index = select.SELECT.from.ref.length - 1
    select.SELECT.from.ref[index] = ensureDraftsSuffix(select.SELECT.from.ref[index])
  }

  if (select.SELECT.where) {
    for (let i = 0; i < select.SELECT.where.length; i++) {
      const element = select.SELECT.where[i]
      if (element.SELECT) {
        _adaptSubSelectsDraft(element)
      } else if (element.xpr) {
        _adaptSubSelectsDraft({ SELECT: { from: {}, where: element.xpr } })
      }
    }
  }
}

const adaptStreamCQN = (cqn, isDraft = false) => {
  let draft = isDraft
  if (!draft) {
    draft = !isActiveEntityRequested(cqn.SELECT.where)
    const ref = cqn.SELECT.from?.ref
    if (!draft && ref) draft = !isActiveEntityRequested(ref[ref.length - 1].where)
  }

  if (draft) _adaptSubSelectsDraft(cqn)
  cqn.SELECT.where = removeIsActiveEntityRecursively(cqn.SELECT.where)
}

module.exports = {
  adaptStreamCQN
}
