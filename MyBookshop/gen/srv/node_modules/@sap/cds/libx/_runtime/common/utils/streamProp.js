const cds = require('../../cds')
const { ensureNoDraftsSuffix, ensureUnlocalized } = require('../../fiori/utils/handler')
const { isDuplicate } = require('./rewriteAsterisks')

const _addColumn = (name, type, columns, url) => {
  // we do not want to return these additional odata properties with new adapter
  if (cds.env.features.odata_new_adapter) return

  if (typeof type === 'object') {
    let mType = type['='].replaceAll(/\./g, '_')
    const ref = {
      ref: [mType],
      as: `${name}@odata.mediaContentType`
    }
    if (!columns.find(isDuplicate(ref))) columns.push(ref)
  } else {
    const val = { val: type, as: `${name}@odata.mediaContentType` }
    if (!columns.find(isDuplicate(val))) columns.push(val)
  }

  if (url) {
    const ref = {
      ref: [name],
      as: `${name}@odata.mediaReadLink`
    }
    if (!columns.find(isDuplicate(ref))) columns.push(ref)
  }
}

const _addColumns = (target, columns) => {
  if (cds.env.features.odata_new_adapter) return

  for (const k in target.elements) {
    const el = target.elements[k]
    if (el['@Core.MediaType']) {
      _addColumn(el.name, el['@Core.MediaType'], columns, el['@Core.IsURL'])
    }
  }
}

// eslint-disable-next-line complexity
const handleStreamProperties = (target, columns, model) => {
  if (!target || !model || !columns) return

  let index = columns.length
  while (index--) {
    const col = columns[index]
    const name = col.ref && col.ref[col.ref.length - 1]
    const element = name && target.elements[name]
    const type = element && element.type
    const mediaType = element?.['@Core.MediaType']

    // new adapter handles urls correctly and just returns them as they are, okra handles them wrongly due to wrong EDM generation by compiler
    const ignoreMediaType = cds.env.features.odata_new_adapter && mediaType && element['@Core.IsURL']

    if (col === '*') {
      _addColumns(target, columns)
    } else if (col.ref && (type === 'cds.LargeBinary' || (mediaType && !ignoreMediaType))) {
      if (mediaType) {
        _addColumn(name, mediaType, columns, element['@Core.IsURL'])
        columns.splice(index, 1)
      } else if (!cds.env.features.stream_compat) {
        columns.splice(index, 1)
      }
    } else if (col.expand && col.ref) {
      const tgt = target.elements[col.ref] && target.elements[col.ref].target
      tgt && handleStreamProperties(model.definitions[ensureUnlocalized(ensureNoDraftsSuffix(tgt))], col.expand, model)
    }
  }
}

module.exports = { handleStreamProperties }
