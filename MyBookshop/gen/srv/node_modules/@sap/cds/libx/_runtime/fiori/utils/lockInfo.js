const cds = require('../../cds')
const { getTransition } = require('../../common/utils/resolveView')
const { getKeyData, getLockWhere } = require('../utils/where')
const { entity_keys } = require('../utils/handler')

const getLockInfo = (req, dataSource) => {
  const keys = entity_keys(req.target)
  const keyData = getKeyData(keys, req.query.SELECT.from.ref[0].where)
  const rootWhere = keys.reduce((res, key) => {
    res[key] = keyData[key]
    return res
  }, {})

  if (dataSource === undefined || dataSource === cds.db) {
    const transition = getTransition(req.target, cds.db)

    // gets the underlying target entity, as record locking can't be
    // applied to localized views
    const target = transition.target
    const where = getLockWhere(rootWhere, transition.mapping)
    return { target, where, rootWhere }
  }

  return { target: req.target, where: req.query.SELECT.from.ref[0].where, rootWhere }
}

module.exports = getLockInfo
